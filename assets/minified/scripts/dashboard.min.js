function getRgbFromHex(hex){if(hex[0]==='#'){hex=hex.slice(1)}
return{r:parseInt(hex[0]+hex[1],16),g:parseInt(hex[2]+hex[3],16),b:parseInt(hex[4]+hex[5],16),}}
function blend(baseValue,overlayValue,alpha){return Math.round((overlayValue*alpha)+(baseValue*(1-alpha)))}
function computeAlphaBlend(baseHex,overlayHex,alpha){const base=getRgbFromHex(baseHex);const overlay=getRgbFromHex(overlayHex);const blended={r:blend(base.r,overlay.r,alpha),g:blend(base.g,overlay.g,alpha),b:blend(base.b,overlay.b,alpha),};return'#'+blended.r.toString(16)+blended.g.toString(16)+blended.b.toString(16)};const FullMonth=["January","February","March","April","May","June","July","August","September","October","November","December"];const AbbrMonth=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sept","Oct","Nov","Dec"];const FullDaysOfWeek=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];const AbbrDaysOfWeek=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];const MinutesInHour=60;const SecondsInMinute=60;const MillisecondsInSecond=1000;class TimeConstantsBase{get MillisecondsInASecond(){return 1000}
get SecondsInAMinute(){return 60}
get MillisecondsInAMinute(){let milli=this.MillisecondsInASecond*this.SecondsInAMinute;return milli}
get MinutesInAnHour(){return 60}
get MillisecondsInAnHour(){let milli=this.MillisecondsInAMinute*this.MinutesInAnHour;return milli}
get HoursInADay(){return 24}
get MillisecondsInADay(){let milli=this.MillisecondsInAnHour*this.HoursInADay;return milli}
get DaysInAYear(){return 365}}
const TimeConstants=new TimeConstantsBase();class TimeSpan{constructor(milli){this.milli=milli;this.totalSeconds=Math.floor(milli/TimeConstants.MillisecondsInASecond);this.totalMinutes=Math.floor(milli/TimeConstants.MillisecondsInAMinute);this.totalHours=Math.floor(milli/TimeConstants.MillisecondsInAnHour);this.totalDays=Math.floor(milli/TimeConstants.MillisecondsInADay);this.seconds=this.totalSeconds%TimeConstants.SecondsInAMinute;this.minutes=this.totalMinutes%TimeConstants.MinutesInAnHour;this.hours=this.totalHours%TimeConstants.HoursInADay;this.days=this.totalDays%TimeConstants.DaysInAYear}
toString(){let duration="";if(this.days>0){duration+=`${this.days}d `}
if(this.hours>0){duration+=`${this.hours}h `}
if(this.minutes>0){duration+=`${this.minutes}m `}
if(this.seconds>0){duration+=`${this.seconds}s`}else if(duration==""){duration="..."}
return duration}}
class DateTime{constructor(date,offset){this._date=date;this.offset=offset}
static parse(dateTime,offset=0){if(dateTime){let irregularFormatRegex=/(\/Date\()(.*)(\)\/)/i;if(typeof dateTime==="string"&&irregularFormatRegex.test(dateTime)){let match=irregularFormatRegex.exec(dateTime);dateTime=parseInt(match[2])}
let milli=typeof dateTime==="number"?dateTime:Date.parse(dateTime);if(isNaN(milli)){milli=1}
offset=offset*TimeConstants.MillisecondsInAnHour;milli+=offset;let date=new Date(milli);return new DateTime(date,offset)}else{return null}}
static now(){return new DateTime(new Date(),8)}
get year(){return this._date.getFullYear()}
get month(){return this._date.getMonth()}
get date(){return this._date.getDate()}
get day(){return this._date.getDay()}
get hour(){return this._date.getHours()}
get minutes(){return this._date.getMinutes()}
get seconds(){return this._date.getSeconds()}
get time(){return this._date.getTime()}
static difference(start,end){var timeDiff=end.getTime()-start.getTime();return new TimeSpan(timeDiff)}
difference(secondDate){let diff=this.time-secondDate.time;return new TimeSpan(diff)}
addDays(days){let newDate=new Date(this._date);newDate.setDate(this.date+days);return new DateTime(newDate,this.offset)}
addYears(years){let newDate=new Date(this._date);newDate.setFullYear(this.year+years);return new DateTime(newDate,this.offset)}
toString(format="yyyy/MM/dd HH:mm:ss"){if(!this._date)
return null;let year=this.year.toString();let subYear=year.padStart(2,'0').slice(-2);let month=this.month;let day=this.day;let date=this.date;let hour=this.hour;let _12Hour=hour<13?hour:hour-12;let isAM=hour<12;let minutes=this.minutes;let seconds=this.seconds;format=format.replace(/dd/g,date.toString().padStart(2,'0'));format=format.replace(/d/g,date);format=format.replace(/HH/g,hour.toString().padStart(2,'0'));format=format.replace(/H/g,hour);format=format.replace(/hh/g,_12Hour.toString().padStart(2,'0'));format=format.replace(/h/g,_12Hour);format=format.replace(/mm/g,minutes.toString().padStart(2,'0'));format=format.replace(/m/g,minutes);format=format.replace(/ss/g,seconds.toString().padStart(2,'0'));format=format.replace(/s/g,seconds);format=format.replace(/yyyyy/g,year.padStart(5,'0'));format=format.replace(/yyyy/g,year.padStart(4,'0'));format=format.replace(/yyy/g,year.padStart(3,'0'));format=format.replace(/yy/g,subYear);format=format.replace(/y/g,parseInt(subYear));format=format.replace(/MMMM/g,"####");format=format.replace(/MMM/g,"###");let _month=month+1;format=format.replace(/MM/g,_month.toString().padStart(2,'0'));format=format.replace(/M/g,_month);format=format.replace(/tt/g,isAM?"AM":"PM");format=format.replace(/t/g,isAM?"A":"P");format=format.replace(/dddd/g,FullDaysOfWeek[day]);format=format.replace(/ddd/g,AbbrDaysOfWeek[day]);format=format.replace(/####/g,FullMonth[month]);format=format.replace(/###/g,AbbrMonth[month]);return format}};const ContextMargin=3;const ContextTopOffset=7;class ContextMenuOption{constructor(label){this.label=label;this.callbacks=[];this.enableChallenge=()=>!0;this.visibleChallenge=()=>!0}
onClick(callback){this.callbacks.push(callback)}
visible(challenge){this.visibleChallenge=challenge}
enable(challenge){this.enableChallenge=challenge}
draw(data){let option;let visible=this.visibleChallenge(data);let enable=this.enableChallenge(data);if(visible){option=syn.create("button");option.text(this.label).addClass("core-context-action").enable(enable);option.click(e=>{this.callbacks.forEach(c=>c(data))})}
return option}}
class ContextMenu{constructor(id,root){this.id=id;this.root=syn.wrap(root);this.options=[];this.data=[]}
addOption(option){this.options.push(option)}
addOptions(...options){options.forEach(o=>this.options.push(o))}
draw(dataIndex){let data=this.data[dataIndex];let options=[];this.options.forEach(o=>{options.push(o.draw(data))});return options}
addData(data){return this.data.push(data)-1}
clearData(){this.data=[]}}
class ContextMenuGlobal{constructor(){this.element=syn.create("div");this.menus={};this.activeTrigger;this.triggerTop;this.triggerLeft;this.init();this.initEventListeners()}
init(){this.element.addClass("core-context");syn.body.append(this.element);Node.prototype.addContext=function(context,data){let dataIndex=context.addData(data);syn.wrap(this).data("context-id",context.id).data("index",dataIndex);return this}}
initEventListeners(){syn.document.on("contextmenu",e=>this.onContext(e));syn.document.click(e=>this.onClick(e))}
addMenu(id,root){let menu=new ContextMenu(id,root);this.menus[id]=menu;return menu}
onContext(e){let target;let isDocument=!1;let contextId;let dataIndex;do{if(target){target=target===null||target===void 0?void 0:target.parentNode}else{target=e.target}
isDocument=target===document;contextId=!isDocument?target.getAttribute("data-context-id"):null}while(!isDocument&&!contextId);target=syn.wrap(target);dataIndex=target.data("index");if(contextId){e.preventDefault();this.reset();this.activeTrigger=target;this.triggerTop=e.clientY;this.triggerLeft=e.clientX;this.show(contextId,dataIndex);target.addClass("active")}}
onClick(e){if(e.target.isSameNode(this.element.self)==!1){this.reset()}}
show(contextId,dataIndex){let element=this.element;let menu=this.menus[contextId];let options=menu.draw(dataIndex);options.forEach(o=>{if(o){element.append(o)}});let root=menu.root;let rootTop=root.boundsTop+ContextMargin;let rootRight=root.boundsRight-ContextMargin;let rootBottom=root.boundsBottom-ContextMargin;let rootLeft=root.boundsLeft+ContextMargin;let contextTop=this.triggerTop-ContextTopOffset;let contextLeft=this.triggerLeft;let contextBottom=contextTop+element.boundsHeight;let contextRight=contextLeft+element.boundsWidth;if(contextLeft<rootLeft){contextLeft=rootLeft}else if(contextRight>rootRight){contextLeft=rootRight-element.boundsWidth}
if(contextTop<rootTop){contextTop=rootTop}else if(contextBottom>rootBottom){contextTop=rootBottom-element.boundsHeight}
element.addClass("active");element.self.style.top=`${contextTop}px`;element.self.style.left=`${contextLeft}px`}
reset(){var _a;this.element.empty();this.element.removeClass("active");this.element.attr("style","");(_a=this.activeTrigger)===null||_a===void 0?void 0:_a.removeClass("active");this.activeTrigger=undefined;this.triggerTop=undefined;this.triggerLeft=undefined}}
const globalContext=new ContextMenuGlobal();(function(){const template=document.createElement("template");template.innerHTML=`
    <style>
    :host {
        background-image: -webkit-linear-gradient(-45deg, #252A32 50%, #2d343e 50%);
        border-radius: 10px;
        box-shadow: 0 3px 6px rgb(0 0 0 / 16%), 0 3px 6px rgb(0 0 0 / 23%);
        box-sizing: border-box;
        color: #FFF;
        cursor: pointer;
        font-family: 'Inter', sans-serif;
        height: 180px;
        max-height: 180px;
        max-width: 320px;
        min-height: 180px;
        min-width: 320px;
        outline: none;
        padding: 20px;
        position: relative;
        user-select: none;
        width: 320px;
    }
    
    :host::before {
        border: solid 3px #4D90FE;
        border-radius: 13px;
        box-sizing: border-box;
        content: "";
        display: none;
        height: calc(100% + 6px);
        left: -3px;
        position: absolute;
        top: -3px;
        width: calc(100% + 6px);
        z-index: 0;
    }
    
    :host:active::before {
        display: block;
    }
    
    .body {
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    
    .body > .title {
        font-size: 16px;
        font-weight: 500;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .balances {
        align-items: center;
        display: flex;
        flex-grow: 1;
    }

    .numbers,
    .category {
        color: #ffffffcc;
        font-size: 13px;
        height: 13px;
        line-height: 13px;
        margin: 0;
    }

    .numbers {
        display: flex;
        margin-bottom: 8px;
    }
    
    .numbers span {
        margin-right: 8px;
    }

    ::slotted(img[slot=icon]) {
        bottom: 23px;
        height: 22px;
        position: absolute;
        right: 18px;
        shape-rendering: geometricPrecision;
    }
    </style>
    <div class="body">
        <span class="title"></span>
        <div class="balances">
            <slot></slot>
        </div>
        <p class="numbers">
            <span>••••</span>
            <span>••••</span>
            <span>••••</span>
            <span class="number">••••</span>
        </p>
        <span class="category"></span>
    </div>
    <slot name="icon"></slot>
    `;class AccountCard extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"});this.shadowRoot.appendChild(template.content.cloneNode(!0))}
static get observedAttributes(){return["data-title","data-number","data-category"]}
get title(){return this.getAttribute("data-title")}
set title(value){this.setAttribute("data-title",value);this.setTitle()}
get number(){return this.getAttribute("data-number")}
set number(value){this.setAttribute("data-number",value!==null&&value!==void 0?value:"••••");this.setNumber()}
get category(){return this.getAttribute("data-category")}
set category(value){this.setAttribute("data-category",value);this.setCategory()}
get titleSpan(){var _a;(_a=this._titleSpan)!==null&&_a!==void 0?_a:(this._titleSpan=this.shadowRoot.querySelector(".title"));return this._titleSpan}
get numberSpan(){var _a;(_a=this._numberSpan)!==null&&_a!==void 0?_a:(this._numberSpan=this.shadowRoot.querySelector(".number"));return this._numberSpan}
get categorySpan(){var _a;(_a=this._categorySpan)!==null&&_a!==void 0?_a:(this._categorySpan=this.shadowRoot.querySelector(".category"));return this._categorySpan}
connectedCallback(){this.setTitle();this.setNumber();this.setCategory()}
attributeChangedCallback(name){switch(name){case "data-title":this.setTitle();break;case "data-number":this.setNumber();break;case "data-category":this.setCategory();break}}
setTitle(){this.titleSpan.innerHTML=this.title}
setNumber(){var _a;const number=(_a=this.number)===null||_a===void 0?void 0:_a.slice(-4);this.numberSpan.innerHTML=number}
setCategory(){this.categorySpan.innerHTML=this.category}}
customElements.define("account-card",AccountCard)})();(function(){const template=document.createElement("template");template.innerHTML=`
    <style>
    :host {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        gap: 5px;
    }

    .title {
        color: #ffffffcc;
        font-size: 13px;
        height: 13px;
        margin: 0;
    }
    
    .figure {
        font-size: 18px;
        font-weight: 500;
        height: 20px;
        line-height: 20px;
    }

    .figure.medium {
        font-size: 16px;
    }

    .figure.small {
        font-size: 15px;
    }

    .figure::after {
        display: inline-block;
        color: #ffffff80;
        font-size: 13px;
        font-weight: 500;
        line-height: 13px;
        margin-left: 5px;
        vertical-align: top;
    }

    .figure.medium::after {
        font-size: 12px;
        margin-left: 4px;
    }

    .figure.small::after {
        font-size: 11px;
        margin-left: 0;
    }

    .currency-php::after {
        content: "PHP";
    }
    </style>
    <span class="title">Projection</span>
    <span class="figure currency-php">
        <slot></slot>
    </span>
    `;class CardBalance extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"});this.shadowRoot.appendChild(template.content.cloneNode(!0))}
static get observedAttributes(){return["data-title","data-currency"]}
get title(){return this.getAttribute("data-title")}
set title(value){this.setAttribute("data-title",value);this.setTitle()}
get currency(){var _a;return(_a=this.getAttribute("data-currency"))!==null&&_a!==void 0?_a:"php"}
set currency(value){this.setAttribute("data-currency",value);this.setCurrency()}
get titleSpan(){var _a;(_a=this._titleSpan)!==null&&_a!==void 0?_a:(this._titleSpan=this.shadowRoot.querySelector(".title"));return this._titleSpan}
get figureSpan(){var _a;(_a=this._figureSpan)!==null&&_a!==void 0?_a:(this._figureSpan=this.shadowRoot.querySelector(".figure"));return this._figureSpan}
get slot(){var _a;(_a=this._slot)!==null&&_a!==void 0?_a:(this._slot=this.shadowRoot.querySelector("slot"));return this._slot}
connectedCallback(){this.setTitle();this.setCurrency();this.slot.addEventListener("slotchange",()=>{const nodes=this.slot.assignedNodes();const content=nodes[0].textContent.replace(/,/g,'');const balance=parseFloat(content);if(isNaN(balance))
return;if(balance>=1000000)
this.figureSpan.classList.add("small");else if(balance>=100000)
this.figureSpan.classList.add("medium");})}
attributeChangedCallback(name){switch(name){case "data-title":this.setTitle();break;case "data-currency":this.setCurrency();break}}
setTitle(){this.titleSpan.innerHTML=this.title}
setCurrency(){this.setAttribute("class",`figure currency-${this.currency}`)}}
customElements.define("card-balance",CardBalance)})();(function(){const template=document.createElement("template");template.innerHTML=`
    <style>
    :host {
        --radius: 5px;
        --radius-mob: 15px;
        --margin: 15px;
        --top: calc(44px / 2);
        --width: 500px;
    }
    
    :host {
        background-color: rgba(0, 0, 0, 0.1);
        display: none;
        height: 100%;
        left: 0;
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 4;
    }

    :host(.visible) {
        display: block;
    }
    
    .panel {
        background-color: #fff;
        border-top-left-radius: var(--radius-mob);
        border-top-right-radius: var(--radius-mob);
        box-shadow: 0 0 2px rgba(0, 0, 0, 0.2), 0 calc(32 * 0.5px) calc((32 * 1px)) rgba(0, 0, 0, 0.24);
        overflow: hidden;
        position: absolute;
        right: 0;
        top: 100%;
        height: calc(100% - var(--top));
        width: 100%;
    }

    .handle-bar {
        align-items: center;
        display: flex;
        height: 20px;
        justify-content: center;
        width: 100%;
    }

    .handle-bar::before {
        background-color: rgba(194, 194, 194, 1);
        border-radius: 4px;
        content: "";
        display: block;
        height: 6px;
        width: 100px;
    }

    slot {
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        gap: 15px;
        height: calc(100% - 20px);
        max-height: 100%;
        padding-top: 10px;
    }
    
    /* Tablet & Up */
    @media only screen and (min-width: 768px) {
        .panel {
            border-radius: var(--radius);
            height: calc(100% - var(--margin) * 2);
            right: calc(var(--width) * -1);
            top: var(--margin);
            width: 500px;
        }
        
        .handle-bar::before {
            display: none;
        }
    }
    </style>

    <div class="panel">
        <div class="handle-bar"></div>
        <slot></slot>
    </div>
    `;class TransactionPanel extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"});this.shadowRoot.appendChild(template.content.cloneNode(!0));this.clickedThroughPanel;this.overlay={alpha:0.0}}
get panel(){var _a;(_a=this._panel)!==null&&_a!==void 0?_a:(this._panel=this.shadowRoot.querySelector(".panel"));return this._panel}
connectedCallback(){this.addEventListener("click",this.hide);this.panel.addEventListener("click",()=>this.clickedThroughPanel=!0)}
show(){this.classList.add("visible");this.animate(!0,0.1)}
hide(){if(this.clickedThroughPanel){this.clickedThroughPanel=!1;return}
this.animate(!1,0)}
animate(show,alpha){var timeline=anime.timeline({duration:300,easing:"easeOutQuint",update:()=>this.changeTheme(),complete:()=>{if(!show){this.classList.remove("visible")}}});const panelAnim={targets:this.panel};if(window.innerWidth<768)
panelAnim.top=show?22:window.innerHeight;else panelAnim.right=show?15:-531;timeline.add(panelAnim,0);const background=`rgba(0, 0, 0, ${alpha})`;timeline.add({targets:this,background:background},0);timeline.add({targets:this.overlay,alpha:alpha},0)}
changeTheme(){const theme=computeAlphaBlend("f2f2f2","000000",this.overlay.alpha);document.querySelector('meta[name="theme-color"]').setAttribute("content",theme)}}
customElements.define("transaction-panel",TransactionPanel)})();var Operation;(function(Operation){Operation[Operation.Create=0]="Create";Operation[Operation.Update=1]="Update"})(Operation||(Operation={}));var AccountStatus;(function(AccountStatus){AccountStatus[AccountStatus.Active=1]="Active";AccountStatus[AccountStatus.Closed=0]="Closed"})(AccountStatus||(AccountStatus={}));var TransactionType;(function(TransactionType){TransactionType[TransactionType.Deposit=0]="Deposit";TransactionType[TransactionType.Withdraw=1]="Withdraw";TransactionType[TransactionType.Transfer=2]="Transfer"})(TransactionType||(TransactionType={}));class Account{}
class Transaction{};(function(){const template=document.createElement("template");template.innerHTML=`
    <style>
    :host {
        align-items: center;
        background-color: rgba(3, 106, 196, 0.2);
        border-radius: 5px;
        color: var(--accent-fill-rest);
        cursor: pointer;
        display: flex;
        flex-grow: 1;
        font-family: var(--body-font);
        font-size: 14px;
        font-weight: 500;
        gap: 10px;
        justify-content: center;
        padding: 10px;
        user-select: none;
        -webkit-user-select: none;
    }

    :host(:hover) {
        background-color: rgba(3, 106, 196, 0.25);
    }
    
    :host(:active) {
        background-color: rgba(3, 106, 196, 0.3);
    }
    </style>
    <fluent-symbol-icon></fluent-symbol-icon> 
    <span>
        <slot></slot>
    </span>
    `;class ActionButton extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"});this.shadowRoot.appendChild(template.content.cloneNode(!0))}
static get observedAttributes(){return["data-icon"]}
get icon(){return this.getAttribute("data-icon")}
set icon(value){this.setAttribute("data-icon",value);this.setIcon()}
get symbolIcon(){var _a;(_a=this._symbolIcon)!==null&&_a!==void 0?_a:(this._symbolIcon=this.shadowRoot.querySelector("fluent-symbol-icon"));return this._symbolIcon}
connectedCallback(){this.setIcon()}
attributeChangedCallback(name){if(name!="data-icon")
return;this.setIcon()}
setIcon(){this.symbolIcon.symbol=this.icon}}
customElements.define("action-button",ActionButton)})();class TransactionManager{constructor(){this.operation=Operation.Create}
loadAccount(account){this.account=account;this.registerComponents();this.refresh()}
refresh(){this.loadCard();this.loadBalances();this.loadTransactions()}
registerComponents(){if(this.isRegistered)
return;this.registerMenu();this.registerActions();this.registerEditor();this.isRegistered=!0}
registerMenu(){this.contextMenu=globalContext.addMenu("transactions_row",this.container);let options=["Update","Post","Delete","Cancel"];let menuOptions=options.reduce((mo,o)=>{const option=new ContextMenuOption(o);option.visible((trans)=>trans.Posted==(o=="Cancel"));mo.push(option);return mo},[]);menuOptions[0].onClick(trans=>this.updateBtnClicked(trans));menuOptions[1].onClick(trans=>this.post(trans));menuOptions[2].onClick(trans=>this.delete(trans));menuOptions[3].onClick(trans=>this.cancel(trans));this.contextMenu.addOptions(...menuOptions)}
registerActions(){const inputs=this.editor.querySelectorAll("form input");this.actions.forEach((action)=>{const type=parseInt(action.dataset.action);action.addEventListener("click",()=>{this.operation=Operation.Create;this.transactionType=type;clearForm();let typeInput=this.editor.querySelector("form input[name=TransactionType]");typeInput.value=type;let dateInput=this.editor.querySelector("form input[name=Date]");dateInput.value=DateTime.now().toString("yyyy-MM-dd");this.editor.show();this.changeTheme("#999999")})});function clearForm(){inputs.forEach(input=>{input.value=input.type!="number"?"":"0.00"})}}
registerEditor(){const amountInput=this.editor.querySelector("form input#amount");const amountInputHidden=this.editor.querySelector("form input[name=Amount]");amountInput.addEventListener("input",()=>{let amount=parseFloat(amountInput.value);if(this.transactionType==TransactionType.Withdraw)
amount*=-1;amountInputHidden.value=amount});const dissmissEditorBtn=document.querySelector("#dismiss_editor_dialog_btn");dissmissEditorBtn.addEventListener("click",()=>{this.changeTheme("#dadada");this.editor.hide()});$("#save_btn").click(()=>this.save())}
loadCard(){const account=this.account;this.card.title=account.Title;this.card.number=account.AccountNumber;this.card.category=account.Category}
loadBalances(){const data={accountId:this.account.Id};const balances=this.card.querySelectorAll("card-balance");axios.get("account/balance.php",{params:data}).then(response=>{const payload=response.data;const content=payload.content;if(!payload.state){alert(`Oops! ${content}`);return}
balances[0].innerText=toCurrency(content.Balance);balances[1].innerText=toCurrency(content.Projection)}).catch(error=>{alert("An error occured.");console.log(error)})}
loadTransactions(){const data={AccountId:this.account.Id};axios.get("transaction/read.php",{params:data}).then(response=>{const payload=response.data;const content=payload.content;if(!payload.state){this.container.innerHTML=`<p class="centered">Oops! ${content}</p>`;return}
this.container.innerHTML=null;let transactions=this.groupTransactions(content);for(let key in transactions){const group=this.newGroup(key,transactions[key]);this.container.appendChild(group)}}).catch(error=>{alert("An error occured.");console.log(error)})}
groupTransactions(trans){var _a;let groups={};for(let t of trans){const key=t.Date+t.Posted;((_a=groups[key])!==null&&_a!==void 0?_a:(groups[key]=[])).push(t)}
return groups}
newGroup(date,trans){let group=$("<div>").addClass("transaction-group");let header=$("<p>").addClass("transaction-group-header");let body=$("<div>").addClass("transaction-group-body");let dateTime=DateTime.parse(date.slice(0,-1));header.text(dateTime.toString("MMM. dd, yyyy"));const status=trans[0].Posted?"actual":"projection";header.addClass(status);group.append(header);group.append(body);for(let t of trans){let row=this.newRow(t);body.append(row)}
return group[0]}
newRow(trans){const status=trans.Posted?"actual":"projection";let row=$(`<div class="transaction-row ${status}">`);let main=$("<div>").addClass("main-content");let desc=$(`<div class='transaction-description'><p>${trans.Description}</p></div>`);let summary=$("<div class='transaction-summary'>");main.append(desc);main.append(summary);row.append(main);let isDebit=trans.Total>=0;let transAmount=Math.abs(trans.Total);let amount=$(`<p>${!isDebit ? "-" : ""} PHP ${toCurrency(transAmount.toString())}</p>`);let ref=$("<p>REF: N/A</p>");summary.append(amount);summary.append(ref);row[0].addContext(this.contextMenu,trans);const actions=$("<div>").addClass("actions-container");row.append(actions);if(status==="projection"){const editAction=this.newAction("edit","Edit");const postAction=this.newAction("post","CompletedSolid");const deleteAction=this.newAction("delete","Delete");editAction.click(()=>{collapseActions();this.updateBtnClicked(trans)});postAction.click(()=>{collapseActions();this.post(trans)});deleteAction.click(()=>{collapseActions();this.delete(trans)});actions.append(editAction);actions.append(postAction);actions.append(deleteAction)}else{const cancelAction=this.newAction("delete","Cancel");actions.append(cancelAction);cancelAction.click(()=>{collapseActions();this.cancel(trans)})}
let initialTouch;let initialLeft;main[0].addEventListener("touchstart",e=>{initialTouch=e.changedTouches[0];initialLeft=parseInt(main.css("left"))});main[0].addEventListener("touchmove",e=>{const touch=Array.from(e.changedTouches).find(tch=>tch.identifier===initialTouch.identifier);if(touch===undefined){console.log("No matches found of the initial touch.");return}
const xDelta=touch.pageX-initialTouch.pageX;const yDelta=touch.pageY-initialTouch.pageY;const left=Math.min(0,initialLeft+xDelta);if(Math.abs(xDelta)>Math.abs(yDelta))
e.preventDefault();main.css({left:left})});main[0].addEventListener("touchend",e=>{const touch=Array.from(e.changedTouches).find(tch=>tch.identifier===initialTouch.identifier);if(touch===undefined){console.log("No matches found of the initial touch.");return}
const left=parseInt(main.css("left"));const actionWidth=actions[0].clientWidth;const threshold=actionWidth/2;const snapPoint=actionWidth*(Math.abs(left)>threshold);anime({targets:main[0],left:-snapPoint,duration:200,easing:"easeInOutQuad"})});function collapseActions(){anime({targets:main[0],left:0,duration:200,easing:"easeInOutQuad"})}
return row}
newAction(name,symbol){const action=$(`<div class="action action-${name}" tabindex="-1">`);const icon=$(`<fluent-symbol-icon></fluent-symbol-icon>`);action.append(icon);icon.attr("symbol",symbol);icon.attr("font-size",20);icon.attr("foreground","#fff");return action}
updateBtnClicked(data){this.operation=Operation.Update;let inputs=this.editor.querySelectorAll("form input");inputs.forEach(input=>{let name=input.name;if(name=="Amount")
return;input.value=name!=""?data[name]:Math.abs(data.Amount)});this.transactionType=data.TransactionType;this.changeTheme("#999999");this.editor.show()}
save(){const operation=Operation[this.operation].toLowerCase();const endpoint=`transaction/${operation}.php`;let form=this.editor.querySelector("form");let data=new FormData(form);data.append("AccountId",this.account.Id.toString());let trans=Object.fromEntries(data.entries());axios.post(endpoint,trans).then(response=>{if(response.data.state)
this.refresh();this.operation=Operation.Create;this.editor.hide();this.changeTheme("#dadada")}).catch(error=>{console.log(error)})}
delete(trans){this.handlePost("transaction/delete.php",trans)}
post(trans){this.handlePost("transaction/post.php",trans)}
cancel(trans){this.handlePost("transaction/cancel.php",trans)}
handlePost(endpoint,trans){axios.post(endpoint,trans).then(response=>{if(response.data.state)
this.refresh();}).catch(error=>{console.log(error)})}
changeTheme(theme){document.querySelector(`meta[name="theme-color"]`).setAttribute("content",theme)}};var body;var refreshCommand;var toggleCommand;var closedAccounts;var contextMenu;var transactionPanel;var transaction;$(document).ready(()=>{var isShowClosed=!1;body=document.querySelector("#layout_body");refreshCommand=document.querySelector("#refresh_command");toggleCommand=document.querySelector("#toggle_closed_command");transactionPanel=document.querySelector("transaction_panel");transaction=new TransactionManager();transaction.card=document.querySelector("#transaction_card");transaction.actions=document.querySelectorAll("action-button");transaction.container=document.querySelector(".transaction-container");transaction.editor=document.querySelector("#editor_dialog");closedAccounts=[];contextMenu=globalContext.addMenu("accounts_card",body);refreshCommand===null||refreshCommand===void 0?void 0:refreshCommand.addEventListener("click",refreshAccounts);toggleCommand===null||toggleCommand===void 0?void 0:toggleCommand.addEventListener("click",()=>{toggleCommand.icon=isShowClosed?"View":"Hide";toggleCommand.label=isShowClosed?"Show Closed Accounts":"Hide Closed Accounts";closedAccounts.forEach(card=>{if(isShowClosed)
card.hide();else card.show()});isShowClosed=!isShowClosed});let closeOption=new ContextMenuOption("Close");let deleteOption=new ContextMenuOption("Delete");closeOption.visible(d=>d.Status==="Active");deleteOption.visible(d=>d.Status==="Active");closeOption.onClick(acct=>{let conf=confirm(`Close account \"${acct.Title}\"?`);if(conf){$.ajax({url:"account/crud/close.php",method:"POST",data:{Id:acct.Id},dataType:"JSON",success:payload=>{if(payload.state){refreshCategories()}else{alert(payload.content)}}})}});deleteOption.onClick(acct=>{let conf=confirm(`Delete account \"${acct.Title}\"?`);if(conf){$.ajax({url:"account/crud/delete.php",method:"POST",data:{Id:acct.Id},dataType:"JSON",success:payload=>{if(payload.state){refreshCategories()}else{alert(payload.content)}}})}});contextMenu.addOptions(closeOption,deleteOption);refreshAccounts()});function refreshAccounts(){body.innerHTML='<p style="text-align: center;">Fetching Accounts...</p>';axios.get("account/crud/read_categorized.php").then(response=>{body.innerHTML=null;let accounts=response.data;if(accounts.state){let content=accounts.content;let categories=content.reduce((arr,acct)=>{let categoryId=acct.CategoryId;if(!arr.some(cat=>cat.Id==acct.CategoryId))
arr.push({Id:categoryId,Title:acct.Category,Color:acct.CategoryColor});return arr},[]);let categorized=content.reduce((map,acct)=>{var _a;return map.set(acct.CategoryId,[...(_a=map.get(acct.CategoryId))!==null&&_a!==void 0?_a:[],acct])},new Map());refreshBalances(categories,categorized)}else{body.innerHTML=`<p class="centered">Oops! ${accounts.content}</p>`}}).catch(error=>{console.dir(error)})}
function refreshBalances(categories,categorized){categorized.forEach((accounts,_category)=>{var _a,_b,_c;let category=(_a=categories.find(cat=>cat.Id==_category))!==null&&_a!==void 0?_a:{};let color=(_b=category===null||category===void 0?void 0:category.Color)!==null&&_b!==void 0?_b:"9E9E9E";let title=(_c=category===null||category===void 0?void 0:category.Title)!==null&&_c!==void 0?_c:"Uncategorized";const container=$('<div class="category"></div>');const accountsGrid=$('<div class="accounts-grid"></div>');const tag=$(`<fluent-symbol-icon symbol="Tag" foreground="#${color}" font-size="13" class="tag"></fluent-symbol-icon>`);const label=$(`<span class="title">${title}</span>`);body.appendChild(container[0]);body.appendChild(accountsGrid[0]);container.append(tag);container.append(label);$.each(accounts,(idx,account)=>{let card=newCard(account,title);accountsGrid.append(card)})})}
function newCard(account,category){var _a,_b;let accountNumber=(_b=(_a=account.AccountNumber)===null||_a===void 0?void 0:_a.slice(-4))!==null&&_b!==void 0?_b:"••••";let bankIcon=account.BankIcon;const card=$("<account-card>");const runningBalance=$("<card-balance>...</card-balance>");const projectedBalance=$("<card-balance>...</card-balance>");const accountBankIcon=$('<img class="account-bank-icon" slot="icon">');card.append(runningBalance);card.append(projectedBalance);card.append(accountBankIcon);card.prop("title",account.Title);card.prop("number",accountNumber);card.prop("category",category);runningBalance.prop("title","Actual");projectedBalance.prop("title","Projection");if(bankIcon!=null){accountBankIcon.attr("src",`assets/images/bank_icons/${bankIcon}.svg`);if(bankIcon=="master_card")
accountBankIcon.attr("style","bottom:16px;height:35px;");if(bankIcon=="ubp"||bankIcon=="gcash")
accountBankIcon.attr("style","bottom:20px;height:30px;right:25px;");if(bankIcon=="cimb")
accountBankIcon.attr("style","bottom:20px;height:28px;right:25px;");}
card[0].addContext(contextMenu,account);if(account.Status!=="Active"){closedAccounts.push(card);card.hide()}
$.ajax({url:"account/balance.php?accountId="+account.Id,method:"GET",dataType:"JSON",success:payload=>{if(payload.state){let balances=payload.content;runningBalance.text(toCurrency(balances.Balance));projectedBalance.text(toCurrency(balances.Projection))}else{runningBalance.text("!");projectedBalance.text("!");console.error(payload.content)}}});card.click(()=>{transaction_panel.show();transaction.loadAccount(account)});return card}
function toCurrency(value){return Intl.NumberFormat("en-US",{minimumFractionDigits:2,maximumFractionDigits:2}).format(value)}